% arara: lualatex: { shell : yes }
% arara: lualatex: { shell : yes }
% arara: bibtex
% arara: lualatex: { shell : yes }
% arara: lualatex: { shell : yes }
% arara: remove: { items: [ log, aux, toc, bbl, blg, pyg ] }
% arara: clean: { files: [ report-gnuplottex-fig1.tex, report-gnuplottex-fig2.tex, report-gnuplottex-fig3.tex, report-gnuplottex-fig4.tex, report-gnuplottex-fig5.tex, report-gnuplottex-fig6.tex, report-gnuplottex-fig7.tex, report-gnuplottex-fig8.tex, report-gnuplottex-fig9.tex, report-gnuplottex-fig10.tex, report-gnuplottex-fig11.tex, report-gnuplottex-fig12.tex, report-gnuplottex-fig13.tex, report-gnuplottex-fig14.tex, report-gnuplottex-fig15.tex, report-gnuplottex-fig16.tex, report-gnuplottex-fig17.tex, report-gnuplottex-fig18.tex, report-gnuplottex-fig19.tex, report-gnuplottex-fig20.tex, report-gnuplottex-fig21.tex, report-gnuplottex-fig22.tex, report-gnuplottex-fig23.tex, report-gnuplottex-fig24.tex, report-gnuplottex-fig25.tex, report-gnuplottex-fig26.tex, report-gnuplottex-fig27.tex, report-gnuplottex-fig28.tex, fit.log ] }
\documentclass[12pt]{rapport}
\usepackage[cleanup]{gnuplottex}
\usepackage{minted}

\usemintedstyle{solarizedlight}
\usepackage[hyphens]{url}
\bibliographystyle{apalike3}
\title{Computer Lab}
\course{34330: Introduction to Mobile Communication}
\author{Martin Jesper Low Madsen (s124320)}
\date{November 7, 2014}
\supervisor{}

\def\arraystretch{1.2}
\begin{document}
\maketitle
\newpage
\tableofcontents
\thispagestyle{empty}
\newpage
\section{Introduction}
Mobile communication technologies are in constant development trying
to adapt to the increasing demand in both capacity and mobile
coverage. Technologies have been invented and later replaced by new
thinking with the help from better and more precise equipment. This
applies back to the invention of \textit{global system for mobile
  communication}, GSM and up till today. Successors such as
\textit{enhanced data rates for GSM evolution}, EDGE,
\textit{universal mobile telecommunications system}, UMTS
and \textit{high speed downlink packet access}, HSDPA have shown a variety of changes
to the access- and core part og the mobile network. One important
element is the packet switched network which allows internet
communication.

In this report, we will look at the impact of these changes in mobile
communication and how these affect the packet switched data
throughput. To perform such tests, we simulate mobile networks using
the software, CommWyse IMNS 3000 and in return we get utilization- and
network-comparable data. The data is plotted using gnuplot and the
resulting graphs are included in following section. Through
simulations we can make decisions based on the results which is
beneficial in ways such as costs and time. Hours of virtual time can
be simulated in just a few minutes.
\newpage
\section{Laboratory results}
\label{sec:lab_res}
\subsection{GPRS/EDGE}
\label{sec:edge}

The setup for this simulation consists of a GPRS- and EDGE network,
each with one \textit{base transceiver station}, BTS and three applied
cells. One of the cells is configured to provide a poor signal. The
other two provide a good signal. The traffic in both cases are
configured to be \textit{transmission control protocol}, TCP-backed
services such as \textit{hypertext transfer protocol}, HTTP,
\textit{file transfer protocol}, FTP and e-mail relevant
protocols with a volume of $100 kbps$. The \textit{time slot}, TS
allocation follows the \textit{multi-slot class}, MSC 10 which implies
an allocation of ``4 downlink/2 uplink/max 5''.

\begin{figure}[H]
  \centering
  \begin{gnuplot}[terminal=tikz]
    set style line 1 lt 1 lc rgb '#e08f2e'
    set style line 2 lt 1 lc rgb '#126996'
    set key outside
    set key center top
    set key spacing 2
    set yrange [0:1]
    set ytic 0.1
    set xlabel "HTTP page response time (s)"
    set ylabel "Cumulative density"
    set grid
    set datafile sep','
    plot 'data/gsm_edge/22 - Chart.csv' using 1:2 with lines ls 1 title 'MS EDGE MSC 10',\
         'data/gsm_edge/22 - Chart.csv' using 3:4 with lines ls 2 title 'MS GPRS MSC 10'
\end{gnuplot}
\caption{Comparison of HTTP page data response time in an EDGE- and GPRS network.}
\label{fig:1_22}
\end{figure}

The simulation results are gathered over a time period of 100 minutes
with 1000 samples. To illustrate the case for both GPRS and EDGE we
plot the cumulative HTTP page response time. Figure \ref{fig:1_22}
shows how the response time growth in both cases are similar. The EDGE
case provides the fastest response time of \char`~40 seconds. GPRS is
behind at \char`~60 seconds response time. EDGE is capable of providing
higher bit rates than GPRS. In realistic cases GPRS provides bit rates
at 70 kbps whereas EDGE provides $200 kbps$
\cite[s. 6]{henrik_edge_i}. This is not reflected in the figure. The
reason for the close similarity in the growth lies in their modulation
scheme. EDGE uses the 8 \textit{phase shift keying}, PSK modulation
which allows higher throughput of symbols which in turn gives a higher
bit rate. The downside of this, is that 8-PSK is more fragile to bit
errors compared to \textit{gaussian minimum shift keying}, GMSK used
in GPRS. Due to a poor signal in one cell, the HTTP response times in
both cases are approximately the same, due to the coding scheme which
is determined by the \textit{signal to noise ratio}, SNR. Thus,
in this setup subscribers don't gain much for having an EDGE network
compared to a GPRS network.

The same behaviour is seen on figure \ref{fig:1_23_email} and
\ref{fig:1_23_ftp}. In both of these cases the response time is \char`~18
seconds faster. This drop in time may be caused by less data being
transferred. Additionally, if the HTTP case should mimic a real
internet browser, then fetching a single \textit{hypertext markup
  language}, HTML document is probably not enough. Websites usually
consists of images, stylesheets and scripts which all must be
fetched. Each file requires an establishment of a TCP connection and a
successful HTTP transfer. Using pipelining introduced in HTTP/1.1
these requests could be performed in a single connection \cite{http}.
\begin{figure}[H]
  \centering
  \begin{gnuplot}[terminal=tikz]
    set style line 1 lt 1 lc rgb '#e08f2e'
    set style line 2 lt 1 lc rgb '#126996'
    set key outside
    set key center top
    set key spacing 2
    set xlabel "E-mail retrieval time (s)"
    set ylabel "Cumulative density"
    set grid
    set datafile sep','
    plot 'data/gsm_edge/23 - Email Retrieval Chart.csv' using 1:2 with lines ls 1 title 'MS EDGE MSC 10',\
         'data/gsm_edge/23 - Email Retrieval Chart.csv' using 3:4 with lines ls 2 title 'MS GPRS MSC 10'
\end{gnuplot}
\caption{Comparison of e-mail data retrieval time in an EDGE- and GPRS network.}
\label{fig:1_23_email}
\end{figure}
\begin{figure}[H]
  \centering
  \begin{gnuplot}[terminal=tikz]
    set style line 1 lt 1 lc rgb '#e08f2e'
    set style line 2 lt 1 lc rgb '#126996'
    set key outside
    set key center top
    set key spacing 2
    set xlabel "FTP download response time (s)"
    set ylabel "Cumulative density"
    set grid

    set datafile sep','
    plot 'data/gsm_edge/23 - FTP Chart.csv' using 1:2 with lines ls 1 title 'MS EDGE MSC 10',\
         'data/gsm_edge/23 - FTP Chart.csv' using 3:4 with lines ls 2 title 'MS GPRS MSC 10'
\end{gnuplot}
\caption{Comparison of FTP download response time in an EDGE- and GPRS network.}
\label{fig:1_23_ftp}
\end{figure}

Instead, by comparing single cells it can be seen by the results in
figure \ref{fig:1_24} that response times change drastically by
improving the signal. The figure compares two cells from the original
setup. Cell2G-3 is the cell with the poor signal and Cell2G-1 is the
cell with a good signal. Poor signals cause bit errors, which cause
more retransmissions and less throughput (because of added error
correcting code) and that is clearly shown in the comparison between
the two cells.

\begin{figure}[H]
  \centering
  \begin{gnuplot}[terminal=tikz]
    set style line 1 lt 1 lc rgb '#e08f2e'
    set style line 2 lt 1 lc rgb '#126996'
    set key outside
    set key center top
    set key spacing 2
    set xlabel "FTP download response time (s)"
    set ylabel "Cumulative density"
    set grid
    set datafile sep','
    plot 'data/gsm_edge/24 - Chart.csv' using 1:2 with lines ls 1 title 'Good signal -- MS EDGE MSC 10 Cell2G-1',\
         'data/gsm_edge/24 - Chart.csv' using 3:4 with lines ls 2 title 'Poor signal -- MS EDGE MSC 10 Cell2G-3'
\end{gnuplot}
\caption{Comparison of FTP download response time in two cells with respectively good and poor signal within an EDGE network.}
\label{fig:1_24}
\end{figure}

The following two figures, \ref{fig:1_25} and \ref{fig:1_26}, show the
allocation of data TSs in the two cells and the mean value in both
cases show that Cell2G-3 uses an extra data TS in average. This
implies that a poor signal causes less capacity for voice or
lower data throughput in average. The TS allocation in
\textit{downlink}, DL is determined by the MSC and is limited to four
TSs per terminal. The extra TS will be wasted on retransmissions and it
appears that these will also happen in Cell2G-1 seeing the average is
greater than the number of allocated TSs.

\begin{figure}[H]
  \centering
  \begin{gnuplot}[terminal=tikz]
    set style line 1 lt 1 lc rgb '#e08f2e'
    set style line 2 lt 1 lc rgb '#126996'
    set key outside
    set key center top
    set key spacing 2
    set xlabel "Time (s)"
    set ylabel "DL used data capacity (TS)"
    set grid
    set datafile sep','
    plot 'data/gsm_edge/25 - Chart.csv' using 1:2 with steps ls 1 title 'Cell2G-1',\
         'data/gsm_edge/25 - Chart.csv' using 3:4 with steps ls 2 title 'Cell2G-1 Mean'
\end{gnuplot}
\caption{Allocation of data time slots in a 2G cell with good signal.}
\label{fig:1_25}
\end{figure}

\begin{figure}[H]
  \centering
  \begin{gnuplot}[terminal=tikz]
    set style line 1 lt 1 lc rgb '#e08f2e'
    set style line 2 lt 1 lc rgb '#126996'
    set key outside
    set key center top
    set key spacing 2
    set xlabel "Time (s)"
    set ylabel "DL used data capacity (TS)"
    set grid
    set datafile sep','
    plot 'data/gsm_edge/26 - Chart.csv' using 1:2 with steps ls 1 title 'Cell2G-3',\
         'data/gsm_edge/26 - Chart.csv' using 3:4 with steps ls 2 title 'Cell2G-3 Mean'
\end{gnuplot}
\caption{Allocation of data time slots in a 2G cell with poor signal.}
\label{fig:1_26}
\end{figure}

Instead of comparing two cells, the case is resimulated with good signal
in all three cells. This way the results show how big of an impact a
poor signal is in an EDGE network. Figure \ref{fig:1_31} compares
these two cases and the worst response times have greatly
improved. The worst response time is approximately \char`~70 seconds, which
is much better compared to \char`~135 seconds.

\begin{figure}[H]
  \centering
  \begin{gnuplot}[terminal=tikz]
    set style line 1 lt 1 lc rgb '#e08f2e'
    set style line 2 lt 1 lc rgb '#126996'
    set key outside
    set key center top
    set key spacing 2
    set xlabel "FTP download response time (s)"
    set ylabel "Cumulative density"
    set grid
    set datafile sep','
    plot 'data/gsm_edge/31 - Chart.csv' using 1:2 with lines ls 1 title 'MS EDGE MSC 10',\
         'data/gsm_edge/31 - Chart.csv' using 3:4 with lines ls 2 title 'MS EDGE MSC 10 improved signal'
\end{gnuplot}
\caption{Comparison of a two EDGE networks with different radio signal quality. The improved network provides good signal in all cells while the other network has one cell which has a poor signal quality.}
\label{fig:1_31}
\end{figure}

Figure \ref{fig:1_32} continues by comparing an improved case for both
EDGE and GPRS. This way the throughput difference is what was
initially expected. EDGE is approximately \char`~10 seconds faster than
GPRS in general. This gap varies with coding schemes and bit
errors. Assuming, the FTP transfer is $2kb$ and the best case of GPRS is
\char`~28 seconds then the bit rate is $71.43kbps$. If this is compared to
the EDGE part at \char`~15 seconds, its bit rate would be $133.33kbps$. The
GPRS part is close to the realistic bit rate from earlier, while the
EDGE bit rate is $67kbps$ off. Again, by assumption, three data TSs are used
and the EDGE bit rate would be true if \textit{modulation coding scheme},
MCS-7 was used.

\begin{figure}[H]
  \centering
  \begin{gnuplot}[terminal=tikz]
    set style line 1 lt 1 lc rgb '#e08f2e'
    set style line 2 lt 1 lc rgb '#126996'
    set key outside
    set key center top
    set key spacing 2
    set xlabel "FTP download response time (s)"
    set ylabel "Cumulative density"
    set grid
    set datafile sep','
    plot 'data/gsm_edge/32 - Chart.csv' using 1:2 with lines ls 1 title 'MS EDGE MSC 10 improved signal',\
         'data/gsm_edge/32 - Chart.csv' using 3:4 with lines ls 2 title 'MS GPRS MSC 10 improved signal'
\end{gnuplot}
\caption{FTP download response time comparison of two networks, EDGE and GPRS, with a good radio
  signal quality.}
\label{fig:1_32}
\end{figure}

\subsection{UMTS}
Moving ahead one generation, to 3G, the simulation results in this
section shows how UMTS improves the network capacity from earlier. The
simulated network consists of two NodeBs that each has one
\textit{user equipment}, UE attached. One performs FTP traffic (UE-1) and the
other HTTP (UE-2). The UE-1 is configured to perform traffic every 300 second
based on a constant file size of $200kB$. The UE-2 performs traffic
every 120 second based on a $1kB$ HTML document which points to an
additional 10 objects of $5kB$. Thus, $51kB$ in total of traffic. This
setup is present in two different scenarios, referred to as Vendor
X/Y. The two scenarios have a few different parameters such as
\textit{radio access bearer}, RAB setup algorithm, initial bit rate
DL/UL and supported bit rates DL/UL. These values can be seen on table
\ref{tab:umts}.
\begin{table}[H]
\centering
\begin{tabular}{|l|c|c|}
\hline
 & Vendor X & Vendor Y \\
\hline
 Initial bit rate (UL) & $32kbps$ & $64kbps$ \\
\hline
 Initial bit rate (DL) & $32kbps$ & $64kbps$ \\
\hline
 Supported bit rates (UL) & 32-, 64-, $128kbps$ & 8-, 32-, 64-, $128kbps$
 \\
\hline
 Supported bit rates (DL) & 32-, 64-, 128-, $384kbps$ & 8-, 32-, 64-,
 128-, 256-, $384kbps$ \\
\hline
RAB setup algorithm & Use initial & Negotiate \\
\hline
\end{tabular}
\caption{Parameters for Vendor X and vendor Y.}
\label{tab:umts}
\end{table}
The simulation results for both UE cases is seen on figure
\ref{fig:2_10} and \ref{fig:2_11}, respectively UE-1 and UE-2. It
appears the response times are slightly shorter in the HTTP case
where a 1/4 of the data amount is fetched compared to the FTP
case. The best cases of UE-2 equals the worst case of the UE-1. An
explanation for this difference could be the wasted time from TCP
connection establishment. Unless the UE-2 traffic uses pipelining, it
would set up 11 TCP connections which in comparison spends \char`~1 second
in total compared to the results from UE-1. The UE-1 only establishes
one connection.
\begin{figure}[H]
  \centering
  \begin{gnuplot}[terminal=tikz]
    set style line 1 lt 1 lc rgb '#e08f2e'
    set style line 2 lt 1 lc rgb '#126996'
    set key outside
    set key center top
    set key spacing 2
    set xlabel "Time (s)"
    set ylabel "FTP download response time (s)"
    set grid
    set datafile sep','
    set terminal unknown
    plot 'data/umts/10 - Chart.csv' using 1:2
    ymax=GPVAL_DATA_Y_MAX
    ymin=GPVAL_DATA_Y_MIN
    f(x) = y_mean
    fit f(x) 'data/umts/10 - Chart.csv' u 1:2 via y_mean
    set xrange [0:4000]
    set terminal tikz
    plot f(x) lt 1 lc rgb 'red' notitle, ymin ls 2 notitle, ymax ls 2 notitle, 'data/umts/10 - Chart.csv' using 1:2 ls 1 pt 7 title 'UMTS-Vendor X -- UE-1'
\end{gnuplot}
\caption{A set of FTP response times for the UE-1 throughout 12 transfers.}
\label{fig:2_10}
\end{figure}

\begin{figure}[H]
  \centering
  \begin{gnuplot}[terminal=tikz]
    set style line 1 lt 1 lc rgb '#e08f2e'
    set style line 2 lt 1 lc rgb '#126996'
    set key outside
    set key center top
    set key spacing 2
    set xlabel "Time (s)"
    set ylabel "HTTP page response time (s)"
    set grid
    set datafile sep','
    set terminal unknown
    plot 'data/umts/11 - Chart.csv' using 1:2
    ymax=GPVAL_DATA_Y_MAX
    ymin=GPVAL_DATA_Y_MIN
    f(x) = y_mean
    fit f(x) 'data/umts/11 - Chart.csv' u 1:2 via y_mean
    set xrange [0:4000]
    set terminal tikz
    plot f(x) lt 1 lc rgb 'red' notitle, ymin ls 2 notitle, ymax ls 2 notitle, 'data/umts/11 - Chart.csv' using 1:2 ls 1 pt 7 title 'UMTS-Vendor X -- UE-2'
\end{gnuplot}
\caption{A set of HTTP response times for the UE-2 throughout 29 transfers.}
\label{fig:2_11}
\end{figure}
If we then compare the second scenario with a few different
parameters, most importantly the negotiate RAB setup algorithm, we get
the plotted data on figure \ref{fig:2_12_b} and \ref{fig:2_12_c}. It
differs a lot and it appears as if the transfers are divided into
different bit rates. This scenario may use a different set of supported
bit rates as listed in \ref{tab:umts}. This can be confirmed by calculating the
approximate response time assuming the supported bit rates are used:
$200kB / (256kbps / 8b) = 6.25s$ and $200kB / (128kbps / 8b) =
12.5s$. These values are almost identical to the data plotted on figure
\ref{fig:2_12_b}.

\begin{figure}[H]
  \centering
  \begin{gnuplot}[terminal=tikz]
    set style line 1 lt 1 lc rgb '#e08f2e'
    set style line 2 lt 1 lc rgb '#126996'
    set key outside
    set key center top
    set key spacing 2
    set xlabel "Time (s)"
    set ylabel "FTP download response time (s)"
    set grid
    set datafile sep','
    set terminal unknown
    plot 'data/umts/12 - Chart b.csv' using 1:2
    ymax=GPVAL_DATA_Y_MAX
    ymin=GPVAL_DATA_Y_MIN
    f(x) = y_mean
    fit f(x) 'data/umts/12 - Chart b.csv' u 1:2 via y_mean
    set xrange [0:4000]
    set terminal tikz
    plot f(x) lt 1 lc rgb 'red' notitle, ymin ls 2 notitle, ymax ls 2 notitle, 'data/umts/12 - Chart b.csv' using 1:2 ls 1 pt 7 title 'UMTS-Vendor Y -- UE-2'
\end{gnuplot}
\caption{A set of FTP response times for the UE-1 throughout 12
  transfers using the negotiate RAB setup algorithm.}
\label{fig:2_12_b}
\end{figure}

\begin{figure}[H]
  \centering
  \begin{gnuplot}[terminal=tikz]
    set style line 1 lt 1 lc rgb '#e08f2e'
    set style line 2 lt 1 lc rgb '#126996'
    set key outside
    set key center top
    set key spacing 2
    set xlabel "Time (s)"
    set ylabel "HTTP page response time (s)"
    set grid
    set datafile sep','
    set terminal unknown
    plot 'data/umts/12 - Chart c.csv' using 1:2
    ymax=GPVAL_DATA_Y_MAX
    ymin=GPVAL_DATA_Y_MIN
    f(x) = y_mean
    fit f(x) 'data/umts/12 - Chart c.csv' u 1:2 via y_mean
    set xrange [0:4000]
    set terminal tikz
    plot f(x) lt 1 lc rgb 'red' notitle, ymin ls 2 notitle, ymax ls 2 notitle, 'data/umts/12 - Chart c.csv' using 1:2 ls 1 pt 7 title 'UMTS-Vendor Y -- UE-2'
\end{gnuplot}
\caption{A set of HTTP response times for the UE-2 throughout 29
  transfers using the negotiate RAB setup algorithm.}
\label{fig:2_12_c}
\end{figure}
By looking further at the actual allocation of UMTS' \textit{dedicated
  channel}, DCH for the scenario using the initial bit rate of
$32kbps$, we see a distinct difference on figure \ref{fig:2_14} and
\ref{fig:2_16}. The UE-1 utilizes the DCH channel better than the
UE-2 as it has to fetch more data.

As part of the setup algorithm, the lower bit rates are used for
initialization signalling, which doesn't require heavy
throughput. Once the initialization part is over, the throughput
increases when the heavy data needs to be transferred. The bit rates
listed in table \ref{tab:umts} are almost
noticable in the two figures.
\begin{figure}[H]
  \centering
  \begin{gnuplot}[terminal=tikz]
    set style line 1 lt 1 lc rgb '#e08f2e'
    set style line 2 lt 1 lc rgb '#126996'
    set key outside
    set key center top
    set key spacing 2
    set xrange [1485:1505]
    set xlabel "Time (s)"
    set ylabel "Bit rate (bps)"
    set grid
    set datafile sep','
    plot 'data/umts/14 - Chart.csv' using 1:2 with steps ls 1 title 'UMTS-Vendor X -- UE-1 -- Bit rate allocation DL (bps)',\
         'data/umts/14 - Chart.csv' using 3:4 with steps ls 2 title 'UMTS-Vendor X -- UE-1 -- Throughput DL (bps)'
\end{gnuplot}
\caption{DCH allocation using the initial RAB setup algorithm for
  transferring FTP data.}
\label{fig:2_14}
\end{figure}

\begin{figure}[H]
  \centering
  \begin{gnuplot}[terminal=tikz]
    set style line 1 lt 1 lc rgb '#e08f2e'
    set style line 2 lt 1 lc rgb '#126996'
    set key outside
    set key center top
    set key spacing 2
    set xrange [154:175]
    set xlabel "Time (s)"
    set ylabel "Bit rate (bps)"
    set grid
    set datafile sep','
    plot 'data/umts/16 - Chart.csv' using 1:2 with steps ls 1 title 'UMTS-Vendor X -- UE-2 -- Bit rate allocation DL (bps)',\
         'data/umts/16 - Chart.csv' using 3:4 with steps ls 2 title 'UMTS-Vendor X -- UE-2 -- Throughput DL (bps)'
\end{gnuplot}
\caption{DCH allocation using the initial RAB setup algorithm for
  transferring HTTP data.}
\label{fig:2_16}
\end{figure}

The above figures can be compared to the different allocation strategy
provided by the negotiate RAB setup algorithm in the second
scenario. Figure \ref{fig:2_17_b} and \ref{fig:2_17_c} does not have
the initialization allocation area like before, which is due to the
change in allocation strategy. The RAB setup algorithm now allocates
the full capacity of the DCH channel. Some parts of the transferred
data remains with a low bit rate which could be protocol related
messages. Additionally, according to the supported bit rates the
throughput is divided into these bit rates accordingly. Figure
\ref{fig:2_17_b} displays this division clearly around $64kbps$,
$128kbps$ and $384kbps$. The second scenario does not limit the bit
rate seen from a subscriber's point of view, thus the \textit{quality of
service}, QoS will be increased. However, power related costs would increase
for the vendor.
\begin{figure}[H]
  \centering
  \begin{gnuplot}[terminal=tikz]
    set style line 1 lt 1 lc rgb '#e08f2e'
    set style line 2 lt 1 lc rgb '#126996'
    set key outside
    set key center top
    set key spacing 2
    set xrange [885:907]
    set xlabel "Time (s)"
    set ylabel "Bit rate (bps)"
    set grid
    set datafile sep','
    plot 'data/umts/17 - Chart b.csv' using 1:2 with steps ls 1 title 'UMTS-Vendor Y -- UE-1 -- Bit rate allocation DL (bps)',\
         'data/umts/17 - Chart b.csv' using 3:4 with steps ls 2 title 'UMTS-Vendor Y -- UE-1 -- Throughput DL (bps)'
\end{gnuplot}
\caption{DCH allocation using the negotiate RAB setup algorithm for
  transferring FTP data.}
\label{fig:2_17_b}
\end{figure}

\begin{figure}[H]
  \centering
  \begin{gnuplot}[terminal=tikz]
    set style line 1 lt 1 lc rgb '#e08f2e'
    set style line 2 lt 1 lc rgb '#126996'
    set key outside
    set key center top
    set key spacing 2
    set xrange [275:288]
    set xlabel "Time (s)"
    set ylabel "Bit rate (bps)"
    set grid
    set datafile sep','
    plot 'data/umts/17 - Chart c.csv' using 1:2 with steps ls 1 title 'UMTS-Vendor Y -- UE-2 -- Bit rate allocation DL (bps)',\
         'data/umts/17 - Chart c.csv' using 3:4 with steps ls 2 title 'UMTS-Vendor Y -- UE-2 -- Throughput DL (bps)'
\end{gnuplot}
\caption{DCH allocation using the negotiate RAB setup algorithm for
  transferring HTTP data.}
\label{fig:2_17_c}
\end{figure}
Relating the above scenarios to a hot spot area in an airport, we can
see how the response times change by the choice of RAB
strategies. Looking at figure \ref{fig:2_24} we see how the above
parameters (table \ref{tab:umts}) affect the response
times. Approximately \char`~92\% of users can expect a response time of
about 15 seconds in the first scenario compared to the second scenario
which in the same time only provides a similar throughput to
\char`~80\% of users. A similar growth can be seen on figure
\ref{fig:2_25} for FTP traffic.
\begin{figure}[H]
  \centering
  \begin{gnuplot}[terminal=tikz]
    set style line 1 lt 1 lc rgb '#e08f2e'
    set style line 2 lt 1 lc rgb '#126996'
    set key outside
    set key center top
    set key spacing 2
    set xlabel "HTTP page response time (s)"
    set ylabel "Cumulative density"
    set grid
    set datafile sep','
    plot 'data/umts/24 - Chart.csv' using 5:6 with lines ls 1 title 'Aiport-Vendor X -- All UE-nodes',\
         'data/umts/24 - Chart.csv' using 7:8 with lines ls 2 title 'Aiport-Vendor Y -- All UE-nodes'
\end{gnuplot}
\caption{HTTP response times for a hot spot in an airport using the
  ``initial'' and ``negotiate'' RAB strategy.}
\label{fig:2_24}
\end{figure}

\begin{figure}[H]
  \centering
  \begin{gnuplot}[terminal=tikz]
    set style line 1 lt 1 lc rgb '#e08f2e'
    set style line 2 lt 1 lc rgb '#126996'
    set key outside
    set key center top
    set key spacing 2
    set yrange [0:1]
    set ytics 0.1
    set xlabel "FTP download response time (s)"
    set ylabel "Cumulative density"
    set grid
    set datafile sep','
    plot 'data/umts/25 - Chart.csv' using 5:6 with lines ls 1 title 'Aiport-Vendor X -- All UE-nodes',\
         'data/umts/25 - Chart.csv' using 7:8 with lines ls 2 title 'Aiport-Vendor Y -- All UE-nodes'
\end{gnuplot}
\caption{FTP response times for a hot spot in an airport using the
  ``initial'' and ``negotiate''  RAB strategy.}
\label{fig:2_25}
\end{figure}
In the following two graphs HTTP session initialization- and successful
sessions results show how many sessions each scenario (RAB strategy)
can handle over time. The negotiate strategy is not limited in its DCH
allocation which shows in figure \ref{fig:2_26_d} that it is slightly
faster during initialization.
\begin{figure}[H]
  \centering
  \begin{gnuplot}[terminal=tikz]
    set style line 1 lt 1 lc rgb '#e08f2e'
    set style line 2 lt 1 lc rgb '#126996'
    set key outside
    set key center top
    set key spacing 2
    set xlabel "Time (s)"
    set ylabel "HTTP session initializations"
    set grid
    set datafile sep','
    plot 'data/umts/26 - Chart d.csv' using 5:6 with lines ls 1 title 'Aiport-Vendor X -- Sum of all UE-nodes',\
         'data/umts/26 - Chart d.csv' using 7:8 with lines ls 2 title 'Aiport-Vendor Y -- Sum of all UE-nodes'
\end{gnuplot}
\caption{Started HTTP sessions compared for two RAB strategies,
  ``initial'' and ``negotiate''.}
\label{fig:2_26_d}
\end{figure}
In the case of a successful session, the initial strategy appears to
be more effective in figure \ref{fig:2_26_e} and the sessions end
earlier compared to the negotiate strategy. The choice of strategy is
relevant for the QoS end-to-end and in this case is weighened at
whether fast sessions is the goal or quick initializations. The vendor
needs to make this decision.
\begin{figure}[H]
  \centering
  \begin{gnuplot}[terminal=tikz]
    set style line 1 lt 1 lc rgb '#e08f2e'
    set style line 2 lt 1 lc rgb '#126996'
    set key outside
    set key center top
    set key spacing 2
    set xlabel "Time (s)"
    set ylabel "Successful HTTP sessions"
    set grid
    set datafile sep','
    plot 'data/umts/26 - Chart e.csv' using 5:6 with lines ls 1 title 'Aiport-Vendor X -- Sum of all UE-nodes',\
         'data/umts/26 - Chart e.csv' using 7:8 with lines ls 2 title 'Aiport-Vendor Y -- Sum of all UE-nodes'
\end{gnuplot}
\caption{Successful HTTP sessions compared for two RAB strategies,
  ``initial'' and ``negotiate''.}
\label{fig:2_26_e}
\end{figure}

\subsection{HSPDA}
Continuing on to new technologies, we now take a look at HSDPA and how
this affects capacity compared to the previous technologies. The
network is preconfigured for two scenarios, one as UMTS like before
and one which is HSPDA capable. Figure \ref{fig:3_33} shows simulation
results for a comparison between UMTS and HSDPA. HSDPA provides
drastically better response times compared to UMTS.
\begin{figure}[H]
  \centering
  \begin{gnuplot}[terminal=tikz]
    set style line 1 lt 1 lc rgb '#e08f2e'
    set style line 2 lt 1 lc rgb '#126996'
    set key outside
    set key center top
    set key spacing 2
    set xlabel "Time (s)"
    set ylabel "FTP download response time (s)"
    set grid
    set datafile sep','
    plot 'data/hsdpa/33 - Chart.csv' using 1:2 ls 1 pt 7 title 'UMTS -- UE-1',\
         'data/hsdpa/33 - Chart.csv' using 3:4 ls 2 pt 7 title 'HSDPA -- UE-1'
\end{gnuplot}
\caption{FTP response time difference in UMTS and HSDPA.}
\label{fig:3_33}
\end{figure}
The huge difference in response time means a big
increase in throughput. This is reflected in the plotted results on
figure \ref{fig:3_34}. The figure clearly shows how much faster the
transfer is completed compared to UMTS. With HSDPA the transmitted
data is successfully transfered after just six seconds. The UMTS
network is much slower and it takes a total of 30 seconds to complete
the transfer. HSPDA utilizes the resources by bundling channels of
\textit{spreading factor}, SF-16 onto a shared channel, HS-DSCH. This
provides much more capacity and is further improved by using 16
\textit{quadrature amplitude modulation}, QAM modulation as coding
scheme if the SNR allows it.
\begin{figure}[H]
  \centering
  \begin{gnuplot}[terminal=tikz]
    set style line 1 lt 1 lc rgb '#e08f2e'
    set style line 2 lt 1 lc rgb '#126996'
    set key outside
    set key center top
    set key spacing 2
    set xrange [842:877]
    set xlabel "Time (s)"
    set ylabel "DL throughput (bps)"
    set grid
    set datafile sep','
    plot 'data/hsdpa/34 - Chart.csv' using 1:2 with steps ls 1 title 'UMTS -- UE-1',\
         'data/hsdpa/34 - Chart.csv' using 3:4 with steps ls 2 title 'HSDPA -- UE-1'
\end{gnuplot}
\caption{Downlink throughput in two network scenarios of UMTS and HSDPA.}
\label{fig:3_34}
\end{figure}
Knowing that HSDPA is superior to UMTS, we now continue on to a new
case which looks at increasing load in a HSDPA network. This new
network is referred to as HSDPA RR and it has 6 UEs attached to one
cell. All UEs perform FTP traffic.

If we compare all three scenarios the average download response will
appear as seen on figure \ref{fig:3_38}. Extra load on the network
reduces the overall response time for the UEs by \char`~10 seconds.
\begin{figure}[H]
  \centering
  \begin{gnuplot}[terminal=tikz]
    set style line 1 lt 1 lc rgb '#e08f2e'
    set style line 2 lt 1 lc rgb '#126996'
    set key outside
    set key center top
    set key spacing 2
    set xrange [0:2]
    set xlabel "Time (s)"
    set ylabel "Mean FTP download response time (s)"
    set grid
    set datafile sep','
    plot 'data/hsdpa/38 - Chart.csv' using 1 ls 1 pt 7 title 'UMTS -- All UE-nodes',\
         'data/hsdpa/38 - Chart.csv' using 2 ls 2 pt 7 title 'HSDPA -- All UE-nodes',\
         'data/hsdpa/38 - Chart.csv' using 3 pt 7 lt 1 lc rgb 'red' title 'HSDPA RR -- All UE-nodes'
\end{gnuplot}
\caption{Average FTP download response for three networks, UMTS-,
  HSDPA-, and HSDPA RR-based. The HSDPA RR network consists of 6 UEs
  unlike the previous two which only has one UE attached to their cell.}
\label{fig:3_38}
\end{figure}
The simulation results can be further examined and figure
\ref{fig:3_38_g3} shows the previous results compared to the
throughput in the new multi-UE scenario. The throughput of HSDPA RR is
shared among UEs which explains the drop in average response
times. Data being transferred is six times doubled while the bit rate
remains the same.
\begin{figure}[H]
  \centering
  \begin{gnuplot}[terminal=tikz]
    set style line 1 lt 1 lc rgb '#e08f2e'
    set style line 2 lt 1 lc rgb '#126996'
    set key outside
    set key center top
    set key spacing 2
    set xrange [838:884]
    set xlabel "Time (s)"
    set ylabel "NodeB DL throughput (bps)"
    set grid
    set datafile sep','
    plot 'data/hsdpa/38 - Chart g3.csv' using 1:2 with steps ls 1 title 'UMTS -- NodeB-1',\
         'data/hsdpa/38 - Chart g3.csv' using 3:4 with steps ls 2 title 'HSDPA -- NodeB-1',\
         'data/hsdpa/38 - Chart g3.csv' using 5:6 with steps lt 1 lc rgb 'red' title 'HSDPA RR -- NodeB-1'
\end{gnuplot}
\caption{HSDPA RR traffic applied to figure \ref{fig:3_34} where
  multiple UEs transmit on the shared channel.}
\label{fig:3_38_g3}
\end{figure}
If we further look at the results as a \textit{cumulative distributed
  function}, CDF plot we can determine response times as percentages
of users. Figure \ref{fig:3_38_q} shows that 40\% of users can make
use of less than 10 seconds response time. Up to 70\% can have a
fairly short response time at most 20 seconds and everything beyond
varies a lot -- from \char`~20 to \char`~45 seconds.
\begin{figure}[H]
  \centering
  \begin{gnuplot}[terminal=tikz]
    set style line 1 lt 1 lc rgb '#e08f2e'
    set style line 2 lt 1 lc rgb '#126996'
    set key outside
    set key center top
    set key spacing 2
    set yrange [0:1]
    set ytic 0.1
    set xlabel "FTP download response time (s)"
    set ylabel "Cumulative density"
    set grid
    set datafile sep','
    plot 'data/hsdpa/hintie2.csv' using 1:2 with lines ls 1 title 'Baseline -- All UE-nodes'
\end{gnuplot}
\caption{A cumulative growth based on FTP download response times.}
\label{fig:3_38_q}
\end{figure}

\subsection{Iub capacity considerations}
Now we move onto a different part of the access network. The Iub
interface between the NodeB and RNC should be able to handle the
traffic received from the core network and the NodeB and UEs. It must
at no point be the bottleneck in the network infrastructure. Therefore
we test the capability of the Iub interface as an E1 connection which allows transfers
of $2Mbps$. In another scenario we double the capacity to 2 $\times$
E1 connections allowing $4Mbps$ transfers. The NodeB keeps track of
three cells and have three UEs attached. The FTP data traffic is
configured to consists of uniform data with outcomes set in between
200000 and 250000 bytes. From simulation results we can see the
cumulative growth of the download response on figure
\ref{fig:4_6}. Comparing this to previous simulations we have really
good response times and the Iub interface will not be a bottleneck
with three UEs attached. Almost 95\% can assume a response time less
than four seconds. The best response time is around 1.5 seconds.
\begin{figure}[H]
  \centering
  \begin{gnuplot}[terminal=tikz]
    set style line 1 lt 1 lc rgb '#e08f2e'
    set style line 2 lt 1 lc rgb '#126996'
    set key outside
    set key center top
    set key spacing 2
    set yrange [0:1]
    set ytic 0.1
    set xlabel "FTP download response time (s)"
    set ylabel "Cumulative density"
    set grid
    set datafile sep','
    plot 'data/iub/6 - Chart.csv' using 1:2 with lines ls 1 title 'Baseline -- All UE-nodes',\
         'data/iub/6 - Chart.csv' using 3:4 with lines ls 2 title 'Upgraded baseline -- All UE-nodes'
\end{gnuplot}
\caption{Cumulative growth of FTP traffic over an E1 and 2 $\times$ E1 Iub interface.}
\label{fig:4_6}
\end{figure}
Figure \ref{fig:4_6_f} displays the actual throughput over time for
the single E1 connection case. The throughput spikes a lot which tops
at around $1.8Mbps$. Comparing the throughput to the upgraded case
which can be seen on figure \ref{fig:4_6_2f} we see the throughput now
spikes at around $2.5Mbps$. This second scenario seems to have more
narrow spikes than the original case. Plus, the average throughput is
fairly close to one another in both cases.

The two cases help improve the capacity beyond the access network
and interfaces here cannot be slower than the devices in the access
network. For a QoS point of view, it would be wise to say; ``rather be
safe, than sorry'' when it comes to Iub interface dimensioning.
\begin{figure}[H]
  \centering
  \begin{gnuplot}[terminal=tikz]
    set style line 1 lt 1 lc rgb '#e08f2e'
    set style line 2 lt 1 lc rgb '#126996'
    set key outside
    set key center top
    set key spacing 2
    set xlabel "Time (s)"
    set ylabel "DL throughput (bps)"
    set grid
    set datafile sep','
    f(x) = y_mean
    fit f(x) 'data/iub/6 - Chart f.csv' u 1:2 via y_mean
    set xrange [0:4000]
    plot f(x) ls 2 notitle, 'data/iub/6 - Chart f.csv' using 1:2 with lines ls 1 title 'UE-1 -- Baseline'
\end{gnuplot}
\caption{Downlink throughput of the network over time for an E1
  connection Iub interface.}
\label{fig:4_6_f}
\end{figure}

\begin{figure}[H]
  \centering
  \begin{gnuplot}[terminal=tikz]
    set style line 1 lt 1 lc rgb '#e08f2e'
    set style line 2 lt 1 lc rgb '#126996'
    set key outside
    set key center top
    set key spacing 2
    set xlabel "Time (s)"
    set ylabel "DL throughput (bps)"
    set grid
    set datafile sep','
    f(x) = y_mean
    fit f(x) 'data/iub/lastie.csv' u 1:2 via y_mean
    set xrange [0:4000]
    plot f(x) ls 2 notitle, 'data/iub/lastie.csv' using 1:2 with lines ls 1 title 'UE-1 -- Upgraded baseline'
\end{gnuplot}
\caption{Downlink throughput of the network over time for a 2
  $\times$ E1
  connection Iub interface.}
\label{fig:4_6_2f}
\end{figure}

\newpage
\section{Conclusion}
\label{sec:conclusion}
CommWyse IMNS 3000 simulations have provided us with knowledge about
capabilites of capacity in different network technologies. In each
technology case the simulations have increased from GPRS/EDGE to HSDPA
upgraded UMTS network.

Signal quality has a huge impact on what each technology can provide
as throughput. The GPRS/EDGE simulations clearly showed this and how
important efficient coding schemes are. Coverage (as with capacity) is
very important in dimensioning of networks as in the HSDPA
simulations. The throughput, thus the capacity will be maximized if
the coverage is in place, but that does leave with an cost problem at
the vendor. In the end, it is the user who pays the price for this
optimized capacity.
\newpage
\bibliography{litterature}

\end{document}