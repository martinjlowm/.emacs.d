package dk.martinjlowm.xposed_eboks;

import static de.robv.android.xposed.XposedHelpers.findAndHookMethod;
import static de.robv.android.xposed.XposedHelpers.findField;
import static de.robv.android.xposed.XposedHelpers.callMethod;
import de.robv.android.xposed.XposedBridge;
import de.robv.android.xposed.IXposedHookLoadPackage;
import de.robv.android.xposed.XC_MethodHook;
import de.robv.android.xposed.callbacks.XC_LoadPackage.LoadPackageParam;

import java.util.List;
import java.net.URI;
import org.apache.http.NameValuePair;
import org.springframework.http.HttpRequest;
import org.springframework.http.client.ClientHttpRequest;
import org.springframework.http.client.AbstractClientHttpRequest;

public class EBoks implements IXposedHookLoadPackage
{
  public void handleLoadPackage(final LoadPackageParam lpparam) throws Throwable
  {
    if (!lpparam.packageName.equals("com.eboks.activities"))
      return;

    findAndHookMethod("com.eboks.dataaccess.integrator.RestServiceIntegrator",
                      lpparam.classLoader, "initializeRequestData", ClientHttpRequest.class, List.class, String.class,
    new XC_MethodHook()
    {
      @Override
      protected void afterHookedMethod(MethodHookParam param) throws Throwable {
        XposedBridge.log("com.eboks.dataaccess.integrator.RestServiceIntegrator");
        XposedBridge.log("  #initializeRequestData(Request : 0, Header : 1, Content : 2):");

        URI uri = (URI) callMethod(param.args[0], "getURI");
        XposedBridge.log("    Request:");
        XposedBridge.log("    " +uri.toString());

        XposedBridge.log("    Header:");
        List<NameValuePair> headers = (List<NameValuePair>) param.args[1];
        for (int i = 0; i < headers.size(); i++) {
          XposedBridge.log("    "+headers.get(i));
        }

        XposedBridge.log("    Content:");
        XposedBridge.log("    "+param.args[2]);
      }
    });

    }
}
